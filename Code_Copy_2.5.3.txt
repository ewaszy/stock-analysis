1)Added formatting to Sub AllStocksAnalysis()
2)inserted in Sub AllStocksAnalysis() per graphic comparison in lesson: yearValue = InputBox("What year would you like to run the analysis on?")
	1b)Range("A1").Value = "All Stocks (" + yearValue + ")"
	3b) and 5a)Sheets(yearValue).Activate
3)Added Dim startTime As Single
        Dim endTime As Single
4)Added timer to Sub AllStocksAnalysis()
	startTime = Timer 
	endTime = Timer
5) Added MsgBox "This code ran in " & (endTime - startTime) & " seconds for the year " & (yearValue)




Sub Macrocheck()

    Dim testMessage As String
    
    testMessage = "Hello World!"
    
    MsgBox (testMessage)

End Sub




Sub DQAnalysis()
    
    'Sets worksheet we want to output data on
    Worksheets("DQ Analysis").Activate
    
    'Acessess Cell A1 and changes the text to "DAQ0 (Ticker: DQ)"
    Range("A1").Value = "DAQ0 (Ticker: DQ)"
    
    'Create a header row; sets the column headings in the third row, and the first, second, and third columns (A3, B3, and C3).
    'Uses Cells method to access the 3 cells that will made up our header row for our output table
    Cells(3, 1).Value = "Year"
    Cells(3, 2).Value = "Total Daily Volume"
    Cells(3, 3).Value = "Return"
    
    'Change to 2018 worksheet to access stock data for our analysis
    Worksheets("2018").Activate
    
    'Creae a new variableto hold a total volume and initalize it to zero (set initial volume to zero)
    'Note: inside the for loop, we will be incrimentally adding to it
    totalVolume = 0
    
    'Initalize variables for stating and ending price. Since we aren't assigning values, we need to uses Dim and assign double date types.
    Dim startingPrice As Double
    Dim endingPrice As Double
    
    'find the number of rows to loop over
    RowCount = Cells(Rows.Count, "A").End(xlUp).Row
    
    'loop over all the rows ; open for loop
    For i = 2 To RowCount
        
        'Indent for new codeblock
        If Cells(i, 1).Value = "DQ" Then
            
            'increase totalVolume by the value in the current row, but only if the ticker value = "DQ"
            totalVolume = totalVolume + Cells(i, 8).Value
            
        'End codeblock
        End If
        
        'Indent for new codeblock
        'Checks if previous row is NOT a "DQ" data row, but that the current
        'row IS a "DQ" data row. This means its the start of DQ data. When that
        'condition is true, we want to store the starting price into the startingPrice variable.
        If Cells(i - 1, 1).Value <> "DQ" And Cells(i, 1).Value = "DQ" Then
            
            startingPrice = Cells(i, 6).Value
            
        'End codeblock
        End If
        
        'Indent for new codeblock
        'Here we check if the next row IS NOT a "DQ" data row, but that the currentrow IS.
        'This means that we are at the end of the "DQ" data and we can store the ending price in the endingPrice variable.
        If Cells(i + 1, 1).Value <> "DQ" And Cells(i, 1).Value = "DQ" Then
            
            endingPrice = Cells(i, 6).Value
            
        'End codeblock
        End If
    
    'Close for loop
    Next i
    
    'MsgBox (totalVolume)
    
    'We want to output what we found in our analysis, so we switch back to the Output Worksheet.
    'Assign the values in our data table using the cells method. Note that the row is now 4, below the header row we created at the beginning.
    'We set the year, total volume, and yearly return using the variables that collected the data inside the for loop.
    Worksheets("DQ Analysis").Activate
    Cells(4, 1).Value = 2018
    Cells(4, 2).Value = totalVolume
    Cells(4, 3).Value = (endingPrice / startingPrice) - 1
    
End Sub




Sub AllStocksAnalysis()

    Dim startTime As Single
    Dim endTime As Single
    
    yearValue = InputBox("What year would you like to run the analysis on?")
    
        startTime = Timer

    '1)Format the output sheet on All Stocks Analysis worksheet:
    '1a)Activate "All Stocks Analysis" instead of "DQ Analysis".
    Worksheets("All Stocks Analysis").Activate
    
    '1b)Change the A1 Value to "All Stocks(2018)"
    'Range("A1").Value = "All Stocks (2018)"
    Range("A1").Value = "All Stocks (" + yearValue + ")"
    
    '1c)Create Header Rows
    Cells(3, 1).Value = "Ticker"
    Cells(3, 2).Value = "Total Daily Volume"
    Cells(3, 3).Value = "Return"
    
    '2)Initialize array of all tickers
    Dim tickers(12) As String
    tickers(0) = "AY"
    tickers(1) = "CSIQ"
    tickers(2) = "DQ"
    tickers(3) = "ENPH"
    tickers(4) = "FSLR"
    tickers(5) = "HASI"
    tickers(6) = "JKS"
    tickers(7) = "RUN"
    tickers(8) = "SEDG"
    tickers(9) = "SPWR"
    tickers(10) = "TERP"
    tickers(11) = "VSLR"
    
    '3a)Initialize variable for starting price and ending price
    Dim startingPrice As Single
    Dim endingPrice As Single
    
    '3b)Activate data worksheet
    'Worksheets("2018").Activate
    Sheets(yearValue).Activate
    
    '3c)Get the number of rows to loop over
    RowCount = Cells(Rows.Count, "A").End(xlUp).Row
    
    '4)Loop through tickers
    For i = 0 To 11
        
        ticker = tickers(i)
        totalVolume = 0
        
        '5)loop through rows in the data
        '5 Note:)Make sure youre inthe right worksheet first
        'Worksheets("2018").Activate
        Sheets(yearValue).Activate
        For j = 2 To RowCount
            
            '5a)Get total volume for current ticker
            If Cells(j, 1).Value = ticker Then
            
                'increase totalVolume by the value in the current row
                totalVolume = totalVolume + Cells(j, 8).Value
            
            End If
            
            '5b)Get starting price for current ticker
            If Cells(j - 1, 1).Value <> ticker And Cells(j, 1).Value = ticker Then
            
                startingPrice = Cells(j, 6).Value
            
            End If
            
            '5c) get ending price for current ticker
            If Cells(j + 1, 1).Value <> ticker And Cells(j, 1).Value = ticker Then
            
                endingPrice = Cells(j, 6).Value
            
            End If
            
        Next j
        
        '6)Output data for current ticker
        Worksheets("All Stocks Analysis").Activate
        Cells(4 + i, 1).Value = ticker
        Cells(4 + i, 2).Value = totalVolume
        Cells(4 + i, 3).Value = endingPrice / startingPrice - 1
        
    Next i
    
        endTime = Timer
        MsgBox "This code ran in " & (endTime - startTime) & " seconds for the year " & (yearValue)

    '----------------------------------------------------------------------------------------------------
    'Inserted Formatting
    Worksheets("All Stocks Analysis").Activate
    
    'Select Header range and make the text bold by setting the Bold property of the Font property to True
    Range("A3:C3").Font.Bold = True
    
    'Select the same range and add a border to the bottom edge
    Range("A3:C3").Borders(xlEdgeBottom).LineStyle = xlContinuous
    
    'Skill Drill:Using the properties listed for the Font object in the official VBA documentation (Links to an external site.), change three of the font properties of the header.
    
    'Changed font color
    'https://docs.microsoft.com/en-us/office/vba/api/excel.font.color#example
    '.Font.Color = RGB(50, 100, 50) - enter values between 0 and 100
    '.Font.Color = RGB(100, 50, 50)red
    '.Font.Color = RGB(50, 100, 50)green
    '.Font.Color = RGB(50, 50, 100)purple
    Cells(3, 1).Font.Color = RGB(100, 50, 50)
    Cells(3, 2).Font.Color = RGB(50, 100, 50)
    Cells(3, 3).Font.Color = RGB(50, 50, 100)
    
    'Changed Font to Italic
    Range("A3:C3").Font.Italic = True
    
    'Changed font size to 12
    'https://docs.microsoft.com/en-us/office/vba/api/excel.font.size
    'Worksheets("Sheet1").Range("A1:D10").Value = "Test".Font.Size = 12
    Range("A3:C3").Font.Size = 12
    
    'Numeric Formatting
    'Number format string that separates digits with commas
    'Range("B4:B15").NumberFormat = "#,##0"
    'Skill Dril: 2.  Format the price column to use a dollar sign and two significant digits after the decimal point
    'Answer: https://www.exceltip.com/formating-in-vba/formatting-currency-in-vba.html
    Range("B4:B15").NumberFormat = "$#,##0.00"
    
    'Numeric formatting
    'make a single-digit percentage for the return
    'Range("C4:C15").NumberFormat = "0.0%"
    'Skill Drill: Add one more digit of precision to the return percentage.
    Range("C4:C15").NumberFormat = "0.00%"
    
    'Autofit column width
    Columns("B").AutoFit
    
    '8)Conditionally format all the cells we need with a loop.
    'The data starts on row 4 and goes to row 15, so we 'll create two new variables to hold those values
    'remember, we don't want unnamed magic numbers in our code-and have the for loop iterate through each row.
    dataRowStart = 4
    dataRowEnd = 15
    For i = dataRowStart To dataRowEnd
    
    'Conditional Formatting for multiple cells
    
        '1) (Check to see if value is greater than zero)
        If Cells(i, 3) > 0 Then
        
            '2)Color the cell green
            Cells(i, 3).Interior.Color = vbGreen
        
        '4)Add and ElseIf block to check if the cell is less than zero
        ElseIf Cells(i, 3) < 0 Then
    
            '5)Color the cell red
            Cells(i, 3).Interior.Color = vbRed
        
        '6)Add an else block to clear the cell if the value is neither positive nor negative
        Else
    
            '7)Clear the cell color
            Cells(i, 3).Interior.Color = xlNone
    
        '3)End block
        End If
    
    Next i
    'End of Formatting
    '----------------------------------------------------------------------------------------------------

End Sub




'2.4.1 Static formatting
'Create new macro to format our table
Sub formatAllStocksAnalysisTable()

    'Formatting
    Worksheets("All Stocks Analysis").Activate
    
    'Select Header range and make the text bold by setting the Bold property of the Font property to True
    Range("A3:C3").Font.Bold = True
    
    'Select the same range and add a border to the bottom edge
    Range("A3:C3").Borders(xlEdgeBottom).LineStyle = xlContinuous
    
    'Skill Drill:Using the properties listed for the Font object in the official VBA documentation (Links to an external site.), change three of the font properties of the header.
    
    'Changed font color
    'https://docs.microsoft.com/en-us/office/vba/api/excel.font.color#example
    '.Font.Color = RGB(50, 100, 50) - enter values between 0 and 100
    '.Font.Color = RGB(100, 50, 50)red
    '.Font.Color = RGB(50, 100, 50)green
    '.Font.Color = RGB(50, 50, 100)purple
    Cells(3, 1).Font.Color = RGB(100, 50, 50)
    Cells(3, 2).Font.Color = RGB(50, 100, 50)
    Cells(3, 3).Font.Color = RGB(50, 50, 100)
    
    'Changed Font to Italic
    Range("A3:C3").Font.Italic = True
    
    'Changed font size to 12
    'https://docs.microsoft.com/en-us/office/vba/api/excel.font.size
    'Worksheets("Sheet1").Range("A1:D10").Value = "Test".Font.Size = 12
    Range("A3:C3").Font.Size = 12
    
    'Numeric Formatting
    'Number format string that separates digits with commas
    'Range("B4:B15").NumberFormat = "#,##0"
    'Skill Dril: 2.  Format the price column to use a dollar sign and two significant digits after the decimal point
    'Answer: https://www.exceltip.com/formating-in-vba/formatting-currency-in-vba.html
    Range("B4:B15").NumberFormat = "$#,##0.00"
    
    'Numeric formatting
    'make a single-digit percentage for the return
    'Range("C4:C15").NumberFormat = "0.0%"
    'Skill Drill: Add one more digit of precision to the return percentage.
    Range("C4:C15").NumberFormat = "0.00%"
    
    'Autofit column width
    Columns("B").AutoFit
    
    '8)Conditionally format all the cells we need with a loop.
    'The data starts on row 4 and goes to row 15, so we 'll create two new variables to hold those values
    'remember, we don't want unnamed magic numbers in our code-and have the for loop iterate through each row.
    dataRowStart = 4
    dataRowEnd = 15
    For i = dataRowStart To dataRowEnd
    
    'Conditional Formatting for multiple cells
    
        '1) (Check to see if value is greater than zero)
        If Cells(i, 3) > 0 Then
        
            '2)Color the cell green
            Cells(i, 3).Interior.Color = vbGreen
        
        '4)Add and ElseIf block to check if the cell is less than zero
        ElseIf Cells(i, 3) < 0 Then
    
            '5)Color the cell red
            Cells(i, 3).Interior.Color = vbRed
        
        '6)Add an else block to clear the cell if the value is neither positive nor negative
        Else
    
            '7)Clear the cell color
            Cells(i, 3).Interior.Color = xlNone
    
        '3)End block
        End If
    
    Next i
    'End of Formatting
    '----------------------------------------------------------------------------------------------------
        
End Sub





Sub ClearWorksheet()

    Cells.Clear
    
End Sub








Sub yearValueAnalysis()
    
    yearValue = InputBox("What year would you like to run the analysis on?")
    
    'Copied and pasted AllStocks analysis, made 3 modifications: 1b, 3b, 5
    
    '1)Format the output sheet on All Stocks Analysis worksheet:
    '1a)Activate "All Stocks Analysis" instead of "DQ Analysis".
    Worksheets("All Stocks Analysis").Activate
    
    '1b)Change the A1 Value to "All Stocks(2018)"
    'Range("A1").Value = "DAQ0 (2018)"
    'To change this from assigning a hard-coded string literal to using the dynamic value stored in
    'yearValue, we need to build the string in pieces. The tool to do this is concatenation.
    'Concatenation refers to the process of joining two or more strings together.
    'In VBA, we can concatenate strings using the "+" operator. The new line will read:
    Range("A1").Value = "All Stocks (" + yearValue + ")"
    
    '1c)Create Header Rows
    Cells(3, 1).Value = "Ticker"
    Cells(3, 2).Value = "Total Daily Volume"
    Cells(3, 3).Value = "Return"
    
    '2)Initialize array of all tickers
    Dim tickers(12) As String
    tickers(0) = "AY"
    tickers(1) = "CSIQ"
    tickers(2) = "DQ"
    tickers(3) = "ENPH"
    tickers(4) = "FSLR"
    tickers(5) = "HASI"
    tickers(6) = "JKS"
    tickers(7) = "RUN"
    tickers(8) = "SEDG"
    tickers(9) = "SPWR"
    tickers(10) = "TERP"
    tickers(11) = "VSLR"
    
    '3a)Initialize variable for starting price and ending price
    Dim startingPrice As Single
    Dim endingPrice As Single
    
    '3b)Activate data worksheet
    Sheets(yearValue).Activate
    
    '3c)Get the number of rows to loop over
    RowCount = Cells(Rows.Count, "A").End(xlUp).Row
    
    '4)Loop through tickers
    For i = 0 To 11
        
        ticker = tickers(i)
        totalVolume = 0
        
        '5)loop through rows in the data
        '5 Note:)Make sure youre in the right worksheet first
        Sheets(yearValue).Activate
        For j = 2 To RowCount
            
            '5a)Get total volume for current ticker
            If Cells(j, 1).Value = ticker Then
            
                'increase totalVolume by the value in the current row
                totalVolume = totalVolume + Cells(j, 8).Value
            
            End If
            
            '5b)Get starting price for current ticker
            If Cells(j - 1, 1).Value <> ticker And Cells(j, 1).Value = ticker Then
            
                startingPrice = Cells(j, 6).Value
            
            End If
            
            '5c) get ending price for current ticker
            If Cells(j + 1, 1).Value <> ticker And Cells(j, 1).Value = ticker Then
            
                endingPrice = Cells(j, 6).Value
            
            End If
            
        Next j
        
        '6)Output data for current ticker
        Worksheets("All Stocks Analysis").Activate
        Cells(4 + i, 1).Value = ticker
        Cells(4 + i, 2).Value = totalVolume
        Cells(4 + i, 3).Value = endingPrice / startingPrice - 1
        
    Next i
    
    '----------------------------------------------------------------------------------------------------
    'Inserted Formatting
    Worksheets("All Stocks Analysis").Activate
    
    'Select Header range and make the text bold by setting the Bold property of the Font property to True
    Range("A3:C3").Font.Bold = True
    
    'Select the same range and add a border to the bottom edge
    Range("A3:C3").Borders(xlEdgeBottom).LineStyle = xlContinuous
    
    'Skill Drill:Using the properties listed for the Font object in the official VBA documentation (Links to an external site.), change three of the font properties of the header.
    
    'Changed font color
    'https://docs.microsoft.com/en-us/office/vba/api/excel.font.color#example
    '.Font.Color = RGB(50, 100, 50) - enter values between 0 and 100
    '.Font.Color = RGB(100, 50, 50)red
    '.Font.Color = RGB(50, 100, 50)green
    '.Font.Color = RGB(50, 50, 100)purple
    Cells(3, 1).Font.Color = RGB(100, 50, 50)
    Cells(3, 2).Font.Color = RGB(50, 100, 50)
    Cells(3, 3).Font.Color = RGB(50, 50, 100)
    
    'Changed Font to Italic
    Range("A3:C3").Font.Italic = True
    
    'Changed font size to 12
    'https://docs.microsoft.com/en-us/office/vba/api/excel.font.size
    'Worksheets("Sheet1").Range("A1:D10").Value = "Test".Font.Size = 12
    Range("A3:C3").Font.Size = 12
    
    'Numeric Formatting
    'Number format string that separates digits with commas
    'Range("B4:B15").NumberFormat = "#,##0"
    'Skill Dril: 2.  Format the price column to use a dollar sign and two significant digits after the decimal point
    'Answer: https://www.exceltip.com/formating-in-vba/formatting-currency-in-vba.html
    Range("B4:B15").NumberFormat = "$#,##0.00"
    
    'Numeric formatting
    'make a single-digit percentage for the return
    'Range("C4:C15").NumberFormat = "0.0%"
    'Skill Drill: Add one more digit of precision to the return percentage.
    Range("C4:C15").NumberFormat = "0.00%"
    
    'Autofit column width
    Columns("B").AutoFit
    
    '8)Conditionally format all the cells we need with a loop.
    'The data starts on row 4 and goes to row 15, so we 'll create two new variables to hold those values
    'remember, we don't want unnamed magic numbers in our code-and have the for loop iterate through each row.
    dataRowStart = 4
    dataRowEnd = 15
    For i = dataRowStart To dataRowEnd
    
    'Conditional Formatting for multiple cells
    
        '1) (Check to see if value is greater than zero)
        If Cells(i, 3) > 0 Then
        
            '2)Color the cell green
            Cells(i, 3).Interior.Color = vbGreen
        
        '4)Add and ElseIf block to check if the cell is less than zero
        ElseIf Cells(i, 3) < 0 Then
    
            '5)Color the cell red
            Cells(i, 3).Interior.Color = vbRed
        
        '6)Add an else block to clear the cell if the value is neither positive nor negative
        Else
    
            '7)Clear the cell color
            Cells(i, 3).Interior.Color = xlNone
    
        '3)End block
        End If
    
    Next i
    'End of Formatting
    '----------------------------------------------------------------------------------------------------
    
End Sub
